
provider "kubernetes" {
  config_path = "/tmp/kubeconfig"
}

provider "helm" {
  kubernetes {
    config_path = "/tmp/kubeconfig"
  }
}

provider "aws" {
  region = "us-east-1"
}

data "aws_caller_identity" "current" {}

#  Display Argo-CD Information 

data "kubernetes_secret" "argocd_initial_admin_secret" {
  metadata {
    name      = "argocd-initial-admin-secret"
    namespace = "devops"  
  }
}

locals {
  # Try to decode the password, if it fails, use the raw value
  argocd_password = try(
    base64decode(data.kubernetes_secret.argocd_initial_admin_secret.data.password),
    data.kubernetes_secret.argocd_initial_admin_secret.data.password
  )
}

output "argocd_initial_password" {
  value       = local.argocd_password
  description = "Initial admin password for ArgoCD"
  sensitive   = true  # Set to false to allow displaying the password
}

data "kubernetes_resource" "argocd-ingressroute" {
  api_version = "traefik.io/v1alpha1"
  kind        = "IngressRoute"

  metadata {
    name      = "argocd-ingressroute"
    namespace = "devops"
  }
}

locals {
  argocd_host = try(
    data.kubernetes_resource.argocd-ingressroute.object.spec.routes[0].match,
    ""
  )
  # Extract the host from the match string (e.g., "Host(`example.com`)")
  argocdextracted_host = length(regexall("Host\\(`([^`]+)`\\)", local.argocd_host)) > 0 ? replace(local.argocd_host, "/Host\\(`([^`]+)`\\).*/", "$1") : ""
}

output "argocd_url" {
  value       = "https://${local.argocdextracted_host}"
  description = "ArgoCD URL"
}

#  Display PGadmin Information 


data "kubernetes_secret" "pgadmin-credentials" {
  metadata {
    name      = "pgadmin-credentials"
    namespace = "pgadmin"  
  }
}

locals {
  # Try to decode the password, if it fails, use the raw value
  pgadmin_username = try(
    base64decode(data.kubernetes_secret.pgadmin-credentials.data.username),
    data.kubernetes_secret.pgadmin-credentials.data.username
  )
  pgadmin_password = try(
    base64decode(data.kubernetes_secret.pgadmin-credentials.data.password),
    data.kubernetes_secret.pgadmin-credentials.data.password
  )
}

output "pgadmin_initial_login" {
  value       = local.pgadmin_username
  description = "Initial admin login for PGadmin"
  sensitive   = true  
}
output "pgadmin_initial_password" {
  value       = local.pgadmin_password
  description = "Initial admin password for PGadmin"
  sensitive   = true  
}

data "kubernetes_resource" "pgadmin-ingress" {
  api_version = "traefik.io/v1alpha1"
  kind        = "IngressRoute"

  metadata {
    name      = "pgadmin-ingress"
    namespace = "pgadmin"
  }
}

locals {
  pgadmin_host = try(
    data.kubernetes_resource.pgadmin-ingress.object.spec.routes[0].match,
    ""
  )
  # Extract the host from the match string (e.g., "Host(`example.com`)")
  pgadminextracted_host = length(regexall("Host\\(`([^`]+)`\\)", local.pgadmin_host)) > 0 ? replace(local.pgadmin_host, "/Host\\(`([^`]+)`\\).*/", "$1") : ""
}

output "pgadmin_url" {
  value       = "https://${local.pgadminextracted_host}"
  description = "PGadmin URL"
}

#  Display keycloak Information 


data "kubernetes_secret" "keycloak-admin-credentials" {
  metadata {
    name      = "keycloak-admin-credentials"
    namespace = "dev"  
  }
}

locals {
  # Try to decode the password, if it fails, use the raw value
  keycloak_username = try(
    base64decode(data.kubernetes_secret.keycloak-admin-credentials.data.username),
    data.kubernetes_secret.keycloak-admin-credentials.data.username
  )
  keycloak_password = try(
    base64decode(data.kubernetes_secret.keycloak-admin-credentials.data.password),
    data.kubernetes_secret.keycloak-admin-credentials.data.password
  )
}

output "keycloak_initial_login" {
  value       = local.keycloak_username
  description = "Initial admin login for Keycloak"
  sensitive   = true  
}
output "keycloak_initial_password" {
  value       = local.keycloak_password
  description = "Initial admin password for Keycloak"
  sensitive   = true  
}

data "kubernetes_resource" "keycloak-ingress" {
  api_version = "traefik.io/v1alpha1"
  kind        = "IngressRoute"

  metadata {
    name      = "keycloak-ingress"
    namespace = "dev"
  }
}

locals {
  keycloak_host = try(
    data.kubernetes_resource.keycloak-ingress.object.spec.routes[0].match,
    ""
  )
  # Extract the host from the match string (e.g., "Host(`example.com`)")
  keycloakextracted_host = length(regexall("Host\\(`([^`]+)`\\)", local.keycloak_host)) > 0 ? replace(local.keycloak_host, "/Host\\(`([^`]+)`\\).*/", "$1") : ""
}

output "keycloak_url" {
  value       = "https://${local.keycloakextracted_host}"
  description = "PGadmin URL"
}
